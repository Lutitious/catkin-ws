// Generated by gencpp from file second_coursework/SearchFeedback.msg
// DO NOT EDIT!


#ifndef SECOND_COURSEWORK_MESSAGE_SEARCHFEEDBACK_H
#define SECOND_COURSEWORK_MESSAGE_SEARCHFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace second_coursework
{
template <class ContainerAllocator>
struct SearchFeedback_
{
  typedef SearchFeedback_<ContainerAllocator> Type;

  SearchFeedback_()
    : roomNames()
    , roomIds()  {
    }
  SearchFeedback_(const ContainerAllocator& _alloc)
    : roomNames(_alloc)
    , roomIds(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _roomNames_type;
  _roomNames_type roomNames;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _roomIds_type;
  _roomIds_type roomIds;





  typedef boost::shared_ptr< ::second_coursework::SearchFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::second_coursework::SearchFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct SearchFeedback_

typedef ::second_coursework::SearchFeedback_<std::allocator<void> > SearchFeedback;

typedef boost::shared_ptr< ::second_coursework::SearchFeedback > SearchFeedbackPtr;
typedef boost::shared_ptr< ::second_coursework::SearchFeedback const> SearchFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::second_coursework::SearchFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::second_coursework::SearchFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::second_coursework::SearchFeedback_<ContainerAllocator1> & lhs, const ::second_coursework::SearchFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.roomNames == rhs.roomNames &&
    lhs.roomIds == rhs.roomIds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::second_coursework::SearchFeedback_<ContainerAllocator1> & lhs, const ::second_coursework::SearchFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace second_coursework

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::second_coursework::SearchFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::second_coursework::SearchFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::SearchFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::second_coursework::SearchFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::SearchFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::second_coursework::SearchFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::second_coursework::SearchFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee5bd5de1a376e189bc23b781a2b45f6";
  }

  static const char* value(const ::second_coursework::SearchFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee5bd5de1a376e18ULL;
  static const uint64_t static_value2 = 0x9bc23b781a2b45f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::second_coursework::SearchFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "second_coursework/SearchFeedback";
  }

  static const char* value(const ::second_coursework::SearchFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::second_coursework::SearchFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string[] roomNames\n"
"uint32[] roomIds\n"
;
  }

  static const char* value(const ::second_coursework::SearchFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::second_coursework::SearchFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roomNames);
      stream.next(m.roomIds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SearchFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::second_coursework::SearchFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::second_coursework::SearchFeedback_<ContainerAllocator>& v)
  {
    s << indent << "roomNames[]" << std::endl;
    for (size_t i = 0; i < v.roomNames.size(); ++i)
    {
      s << indent << "  roomNames[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.roomNames[i]);
    }
    s << indent << "roomIds[]" << std::endl;
    for (size_t i = 0; i < v.roomIds.size(); ++i)
    {
      s << indent << "  roomIds[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.roomIds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SECOND_COURSEWORK_MESSAGE_SEARCHFEEDBACK_H
